{
	"info": {
		"_postman_id": "874ec57a-b36a-4bcc-9cf1-fb9d934fa986",
		"name": "update_resource_note_field",
		"description": "A demonstration collection which updates the access restriction note in a resource record if it contains a specific string. Out of the box it is set up to look for \"Reproduction and Permissions Request Form\", but the user can change that to whatever. After taking it from Oregon's example, Jacqueline adapated it to exchange the offsite digitization note to say the typical conditons for SCUA.\n\nThe collection uses a for loop to look through all notes attached to a resource record and an if statement to test whether the note is a Conditions Governing Access note.\n\nYou must have an active ArchivesSpace session saved as an environment variable for this collection to work. Run create_aspace_session first to set this up.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37327898"
	},
	"item": [
		{
			"name": "search_resources",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//When testing out your collection, input values into Testing search block.  When you are ready to run a spreadsheet downloaded from ArchivesSpace, comment out the Testing variables (add \"//\" at the begining of the line) and uncomment the Spreadsheet search variable block (remove \"//\" at the begining of the line)\r",
							"\r",
							"    //Spreadsheet search variable block: \r",
							"    var i = pm.iterationData.get(\"identifier\")\r",
							"    //var t = pm.iterationData.get(\"title\")\r",
							"    //var e = pm.iterationData.get(\"ead_id\")\r",
							"\r",
							"    //Testing search variable block:\r",
							"    //var i = \"MSS.0017\"\r",
							"    //var t = \"Name of collection\"\r",
							"    //var e = \"ORU_UA143.xml\"\r",
							"\r",
							"//A log to the console so you can see the search string passed:\r",
							"    console.log (\"@@@\" + i + \" \")\r",
							"\r",
							"//This sets the search term to be run:\r",
							"    pm.variables.set(\"search_term\", i + \" \")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//This gets the response from Postman that you see in the Response area after you hit send\r",
							"var jsonObject = pm.response.json()\r",
							"\r",
							"//This saves the uri in the response so it can be used in the next step\r",
							"pm.environment.set(\"resource_uri\", jsonObject.results[0].uri)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-ArchivesSpace-Session",
						"value": "{{aspace_session}}",
						"description": "Archives Space session ID",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{aspace_base_url}}/repositories/2/search?q={{search_term}}&page=1&page_size=2&type[]=resource",
					"host": [
						"{{aspace_base_url}}"
					],
					"path": [
						"repositories",
						"2",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "{{search_term}}"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "page_size",
							"value": "2"
						},
						{
							"key": "type[]",
							"value": "resource"
						}
					]
				},
				"description": "This portion of the collection takes an input of identifying metadata from ArchivesSpace (identifier, title and ead id) and searches for the resource record to obtain a uri for the resource. Note that by setting \"type\\[\\]=resource\" it will only search resources.\n\nEndFragment"
			},
			"response": []
		},
		{
			"name": "resource_record",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//This gets the response from Postman that you see in the Response area after you hit send\r",
							"var jsonObject = pm.response.json()\r",
							"\r",
							"//This saves the entire resource record so it can be updated in the next step\r",
							"pm.environment.set (\"resource_body\", JSON.stringify(jsonObject))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-ArchivesSpace-Session",
						"value": "{{aspace_session}}",
						"description": "Archives Space session ID",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{aspace_base_url}}{{resource_uri}}",
					"host": [
						"{{aspace_base_url}}{{resource_uri}}"
					]
				},
				"description": "This section of the collection uses the uri returned from the previous step to get the actual resource record (which is returned in JSON) from ArchivesSpace. It then saves a copy of that resource record so that it can be manipulated in the next step."
			},
			"response": []
		},
		{
			"name": "update_to_resource_note",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//This retrieves the resource record saved in the previous step so it can be edited. \r",
							"    var r_body = JSON.parse(pm.environment.get(\"resource_body\"));\r",
							"\r",
							"//This section introduces a new string that will replace all existing conditions governing access notes.  \r",
							"\r",
							"    //Spreadsheet variable:\r",
							"    var n = pm.iterationData.get(\"new_thing\")\r",
							"\r",
							"    //Testing variable:\r",
							"    //var n = \"This collection may be viewed only in the reading room of Special Collections in the Jean and Alexander Heard Library. Collections should be requested 2-3 days prior to visiting in order to facilitate easier access. For questions or to request a collection, contact specialcollections@vanderbilt.edu.\"\r",
							"\r",
							"//This gets the notes from the resource record so they can be checked for existing    \r",
							"var notes = r_body.notes\r",
							"\r",
							"//This part creates a loop that looks through all the notes in the resource record\r",
							"for(var i = 0; i < notes.length; i++) {\r",
							"    //This part looks specifically for Access Restriction Notes by their type\r",
							"    if(notes[i].type == 'accessrestrict') {\r",
							"        //This part looks in the text of the note for the target words, and replaces them with the new note if those words appear.\r",
							"        var target = \"This collection is currently being digitized and is unavailable for research.\"\r",
							"        if (notes[i].subnotes[0].content.includes(target)) {\r",
							"            notes[i].subnotes[0].content = n\r",
							"        } \r",
							"    }\r",
							"}\r",
							"\r",
							"//If you uncomment this line, it will log the entire resource record to the console.  Useful for debugging\r",
							"    console.log (r_body)\r",
							"\r",
							"//This sets the new version of the resource record so it can be passed into ArchivesSpace\r",
							"pm.variables.set(\"resource_body\", JSON.stringify(r_body));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//This gets the response from Postman that you see in the Response area after you hit send\r",
							"    var jsonObject = pm.response.json()\r",
							"\r",
							"//This tests whether the API returns a status code in the 200s, which means good (unlike 404 not found or things like that)\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"//This logs the uri and status returned by ArchivesSpace.  If run as a GET, the status will be \"undefined\".  A successful POST should return a status of \"Updated\"\r",
							"    console.log (\"@@@@\" + jsonObject.uri + \" \" + jsonObject.status)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-ArchivesSpace-Session",
						"value": "{{aspace_session}}",
						"description": "Archives Space session ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "//This is the new version of the resource, set in the Pre-request script, that will be passed into ArchivesSpace\r\n{{resource_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{aspace_base_url}}{{resource_uri}}",
					"host": [
						"{{aspace_base_url}}{{resource_uri}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "This final step in the collection changes the resource in the pre-request script. Run as a GET (which is a good idea when initially testing) it will log the changes to the console so you can confirm that it does what you want. Run as a POST, it will update the resource record in your ArchivesSpace."
			},
			"response": []
		}
	]
}